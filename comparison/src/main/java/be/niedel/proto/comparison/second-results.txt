"C:\Program Files\Java\jdk-14.0.1\bin\java.exe" "-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2020.1.1\lib\idea_rt.jar=59084:C:\Program Files\JetBrains\IntelliJ IDEA 2020.1.1\bin" -Dfile.encoding=UTF-8 -classpath D:\repos\proto\comparison\target\classes;D:\repos\proto\employment-service-contract\target\classes;C:\Users\niels\.m2\repository\com\google\protobuf\protobuf-java\3.13.0\protobuf-java-3.13.0.jar;C:\Users\niels\.m2\repository\com\google\protobuf\protobuf-java-util\3.13.0\protobuf-java-util-3.13.0.jar;C:\Users\niels\.m2\repository\com\google\guava\guava\29.0-android\guava-29.0-android.jar;C:\Users\niels\.m2\repository\com\google\guava\failureaccess\1.0.1\failureaccess-1.0.1.jar;C:\Users\niels\.m2\repository\com\google\guava\listenablefuture\9999.0-empty-to-avoid-conflict-with-guava\listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar;C:\Users\niels\.m2\repository\com\google\code\findbugs\jsr305\3.0.2\jsr305-3.0.2.jar;C:\Users\niels\.m2\repository\org\checkerframework\checker-compat-qual\2.5.5\checker-compat-qual-2.5.5.jar;C:\Users\niels\.m2\repository\com\google\j2objc\j2objc-annotations\1.3\j2objc-annotations-1.3.jar;C:\Users\niels\.m2\repository\com\google\errorprone\error_prone_annotations\2.3.4\error_prone_annotations-2.3.4.jar;C:\Users\niels\.m2\repository\com\google\code\gson\gson\2.8.6\gson-2.8.6.jar;C:\Users\niels\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.11.3\jackson-databind-2.11.3.jar;C:\Users\niels\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.11.3\jackson-annotations-2.11.3.jar;C:\Users\niels\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.11.3\jackson-core-2.11.3.jar;C:\Users\niels\.m2\repository\org\openjdk\jmh\jmh-core\1.25.2\jmh-core-1.25.2.jar;C:\Users\niels\.m2\repository\net\sf\jopt-simple\jopt-simple\4.6\jopt-simple-4.6.jar;C:\Users\niels\.m2\repository\org\apache\commons\commons-math3\3.2\commons-math3-3.2.jar be.niedel.proto.comparison.serialization.DeserializationComparisonApplication
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/C:/Users/niels/.m2/repository/org/openjdk/jmh/jmh-core/1.25.2/jmh-core-1.25.2.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
# JMH version: 1.25.2
# VM version: JDK 14.0.1, OpenJDK 64-Bit Server VM, 14.0.1+7
# VM invoker: C:\Program Files\Java\jdk-14.0.1\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2020.1.1\lib\idea_rt.jar=59084:C:\Program Files\JetBrains\IntelliJ IDEA 2020.1.1\bin -Dfile.encoding=UTF-8
# Warmup: 1 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: be.niedel.proto.comparison.serialization.DeserializationComparisonService.deserializeJSONStringBenchmark

# Run progress: 0,00% complete, ETA 00:12:00
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 606,210 ops/ms
Iteration   1: 624,337 ops/ms
Iteration   2: 627,952 ops/ms
Iteration   3: 630,275 ops/ms

# Run progress: 5,56% complete, ETA 00:11:49
# Fork: 1 of 1
# Warmup Iteration   1: 629,010 ops/ms
Iteration   1: 630,839 ops/ms
Iteration   2: 635,834 ops/ms
Iteration   3: 633,582 ops/ms


Result "be.niedel.proto.comparison.serialization.DeserializationComparisonService.deserializeJSONStringBenchmark":
  633,418 ±(99.9%) 45,629 ops/ms [Average]
  (min, avg, max) = (630,839, 633,418, 635,834), stdev = 2,501
  CI (99.9%): [587,789, 679,048] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 14.0.1, OpenJDK 64-Bit Server VM, 14.0.1+7
# VM invoker: C:\Program Files\Java\jdk-14.0.1\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2020.1.1\lib\idea_rt.jar=59084:C:\Program Files\JetBrains\IntelliJ IDEA 2020.1.1\bin -Dfile.encoding=UTF-8
# Warmup: 1 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: be.niedel.proto.comparison.serialization.DeserializationComparisonService.deserializeProtoEncodedBinaryMessage

# Run progress: 11,11% complete, ETA 00:11:02
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 1444,041 ops/ms
Iteration   1: 1483,539 ops/ms
Iteration   2: 1483,933 ops/ms
Iteration   3: 1483,596 ops/ms

# Run progress: 16,67% complete, ETA 00:10:19
# Fork: 1 of 1
# Warmup Iteration   1: 1375,476 ops/ms
Iteration   1: 1443,439 ops/ms
Iteration   2: 1393,338 ops/ms
Iteration   3: 1397,517 ops/ms


Result "be.niedel.proto.comparison.serialization.DeserializationComparisonService.deserializeProtoEncodedBinaryMessage":
  1411,431 ±(99.9%) 507,136 ops/ms [Average]
  (min, avg, max) = (1393,338, 1411,431, 1443,439), stdev = 27,798
  CI (99.9%): [904,295, 1918,567] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 14.0.1, OpenJDK 64-Bit Server VM, 14.0.1+7
# VM invoker: C:\Program Files\Java\jdk-14.0.1\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2020.1.1\lib\idea_rt.jar=59084:C:\Program Files\JetBrains\IntelliJ IDEA 2020.1.1\bin -Dfile.encoding=UTF-8
# Warmup: 1 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: be.niedel.proto.comparison.serialization.DeserializationComparisonService.deserializeUtf8EncodedBinaryJSONMessageBenchmark

# Run progress: 22,22% complete, ETA 00:09:37
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 687,028 ops/ms
Iteration   1: 696,535 ops/ms
Iteration   2: 698,464 ops/ms
Iteration   3: 693,670 ops/ms

# Run progress: 27,78% complete, ETA 00:08:55
# Fork: 1 of 1
# Warmup Iteration   1: 681,694 ops/ms
Iteration   1: 693,881 ops/ms
Iteration   2: 696,302 ops/ms
Iteration   3: 693,390 ops/ms


Result "be.niedel.proto.comparison.serialization.DeserializationComparisonService.deserializeUtf8EncodedBinaryJSONMessageBenchmark":
  694,524 ±(99.9%) 28,441 ops/ms [Average]
  (min, avg, max) = (693,390, 694,524, 696,302), stdev = 1,559
  CI (99.9%): [666,083, 722,966] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 14.0.1, OpenJDK 64-Bit Server VM, 14.0.1+7
# VM invoker: C:\Program Files\Java\jdk-14.0.1\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2020.1.1\lib\idea_rt.jar=59084:C:\Program Files\JetBrains\IntelliJ IDEA 2020.1.1\bin -Dfile.encoding=UTF-8
# Warmup: 1 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: be.niedel.proto.comparison.serialization.DeserializationComparisonService.deserializeJSONStringBenchmark

# Run progress: 33,33% complete, ETA 00:08:14
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 0,002 ms/op
Iteration   1: 0,002 ms/op
Iteration   2: 0,002 ms/op
Iteration   3: 0,002 ms/op

# Run progress: 38,89% complete, ETA 00:07:32
# Fork: 1 of 1
# Warmup Iteration   1: 0,002 ms/op
Iteration   1: 0,002 ms/op
Iteration   2: 0,002 ms/op
Iteration   3: 0,002 ms/op


Result "be.niedel.proto.comparison.serialization.DeserializationComparisonService.deserializeJSONStringBenchmark":
  0,002 ±(99.9%) 0,001 ms/op [Average]
  (min, avg, max) = (0,002, 0,002, 0,002), stdev = 0,001
  CI (99.9%): [0,001, 0,002] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 14.0.1, OpenJDK 64-Bit Server VM, 14.0.1+7
# VM invoker: C:\Program Files\Java\jdk-14.0.1\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2020.1.1\lib\idea_rt.jar=59084:C:\Program Files\JetBrains\IntelliJ IDEA 2020.1.1\bin -Dfile.encoding=UTF-8
# Warmup: 1 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: be.niedel.proto.comparison.serialization.DeserializationComparisonService.deserializeProtoEncodedBinaryMessage

# Run progress: 44,44% complete, ETA 00:06:51
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 0,001 ms/op
Iteration   1: 0,001 ms/op
Iteration   2: 0,001 ms/op
Iteration   3: 0,001 ms/op

# Run progress: 50,00% complete, ETA 00:06:10
# Fork: 1 of 1
# Warmup Iteration   1: 0,001 ms/op
Iteration   1: 0,001 ms/op
Iteration   2: 0,001 ms/op
Iteration   3: 0,001 ms/op


Result "be.niedel.proto.comparison.serialization.DeserializationComparisonService.deserializeProtoEncodedBinaryMessage":
  0,001 ±(99.9%) 0,001 ms/op [Average]
  (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
  CI (99.9%): [0,001, 0,001] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 14.0.1, OpenJDK 64-Bit Server VM, 14.0.1+7
# VM invoker: C:\Program Files\Java\jdk-14.0.1\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2020.1.1\lib\idea_rt.jar=59084:C:\Program Files\JetBrains\IntelliJ IDEA 2020.1.1\bin -Dfile.encoding=UTF-8
# Warmup: 1 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: be.niedel.proto.comparison.serialization.DeserializationComparisonService.deserializeUtf8EncodedBinaryJSONMessageBenchmark

# Run progress: 55,55% complete, ETA 00:05:29
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 0,001 ms/op
Iteration   1: 0,001 ms/op
Iteration   2: 0,001 ms/op
Iteration   3: 0,001 ms/op

# Run progress: 61,11% complete, ETA 00:04:47
# Fork: 1 of 1
# Warmup Iteration   1: 0,001 ms/op
Iteration   1: 0,001 ms/op
Iteration   2: 0,001 ms/op
Iteration   3: 0,001 ms/op


Result "be.niedel.proto.comparison.serialization.DeserializationComparisonService.deserializeUtf8EncodedBinaryJSONMessageBenchmark":
  0,001 ±(99.9%) 0,001 ms/op [Average]
  (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
  CI (99.9%): [0,001, 0,002] (assumes normal distribution)


# JMH version: 1.25.2
# VM version: JDK 14.0.1, OpenJDK 64-Bit Server VM, 14.0.1+7
# VM invoker: C:\Program Files\Java\jdk-14.0.1\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2020.1.1\lib\idea_rt.jar=59084:C:\Program Files\JetBrains\IntelliJ IDEA 2020.1.1\bin -Dfile.encoding=UTF-8
# Warmup: 1 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: be.niedel.proto.comparison.serialization.DeserializationComparisonService.deserializeJSONStringBenchmark

# Run progress: 66,66% complete, ETA 00:04:06
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 0,002 ±(99.9%) 0,001 ms/op
Iteration   1: 0,002 ±(99.9%) 0,001 ms/op
                 deserializeJSONStringBenchmark·p0.00:   0,002 ms/op
                 deserializeJSONStringBenchmark·p0.50:   0,002 ms/op
                 deserializeJSONStringBenchmark·p0.90:   0,002 ms/op
                 deserializeJSONStringBenchmark·p0.95:   0,002 ms/op
                 deserializeJSONStringBenchmark·p0.99:   0,003 ms/op
                 deserializeJSONStringBenchmark·p0.999:  0,018 ms/op
                 deserializeJSONStringBenchmark·p0.9999: 0,031 ms/op
                 deserializeJSONStringBenchmark·p1.00:   1,321 ms/op

Iteration   2: 0,002 ±(99.9%) 0,001 ms/op
                 deserializeJSONStringBenchmark·p0.00:   0,002 ms/op
                 deserializeJSONStringBenchmark·p0.50:   0,002 ms/op
                 deserializeJSONStringBenchmark·p0.90:   0,002 ms/op
                 deserializeJSONStringBenchmark·p0.95:   0,002 ms/op
                 deserializeJSONStringBenchmark·p0.99:   0,003 ms/op
                 deserializeJSONStringBenchmark·p0.999:  0,018 ms/op
                 deserializeJSONStringBenchmark·p0.9999: 0,031 ms/op
                 deserializeJSONStringBenchmark·p1.00:   1,251 ms/op

Iteration   3: 0,002 ±(99.9%) 0,001 ms/op
                 deserializeJSONStringBenchmark·p0.00:   0,002 ms/op
                 deserializeJSONStringBenchmark·p0.50:   0,002 ms/op
                 deserializeJSONStringBenchmark·p0.90:   0,002 ms/op
                 deserializeJSONStringBenchmark·p0.95:   0,002 ms/op
                 deserializeJSONStringBenchmark·p0.99:   0,003 ms/op
                 deserializeJSONStringBenchmark·p0.999:  0,018 ms/op
                 deserializeJSONStringBenchmark·p0.9999: 0,031 ms/op
                 deserializeJSONStringBenchmark·p1.00:   1,260 ms/op


# Run progress: 72,22% complete, ETA 00:03:25
# Fork: 1 of 1
# Warmup Iteration   1: 0,002 ±(99.9%) 0,001 ms/op
Iteration   1: 0,002 ±(99.9%) 0,001 ms/op
                 deserializeJSONStringBenchmark·p0.00:   0,001 ms/op
                 deserializeJSONStringBenchmark·p0.50:   0,002 ms/op
                 deserializeJSONStringBenchmark·p0.90:   0,002 ms/op
                 deserializeJSONStringBenchmark·p0.95:   0,002 ms/op
                 deserializeJSONStringBenchmark·p0.99:   0,003 ms/op
                 deserializeJSONStringBenchmark·p0.999:  0,018 ms/op
                 deserializeJSONStringBenchmark·p0.9999: 0,031 ms/op
                 deserializeJSONStringBenchmark·p1.00:   1,286 ms/op

Iteration   2: 0,002 ±(99.9%) 0,001 ms/op
                 deserializeJSONStringBenchmark·p0.00:   0,001 ms/op
                 deserializeJSONStringBenchmark·p0.50:   0,002 ms/op
                 deserializeJSONStringBenchmark·p0.90:   0,002 ms/op
                 deserializeJSONStringBenchmark·p0.95:   0,002 ms/op
                 deserializeJSONStringBenchmark·p0.99:   0,003 ms/op
                 deserializeJSONStringBenchmark·p0.999:  0,018 ms/op
                 deserializeJSONStringBenchmark·p0.9999: 0,030 ms/op
                 deserializeJSONStringBenchmark·p1.00:   1,266 ms/op

Iteration   3: 0,002 ±(99.9%) 0,001 ms/op
                 deserializeJSONStringBenchmark·p0.00:   0,001 ms/op
                 deserializeJSONStringBenchmark·p0.50:   0,002 ms/op
                 deserializeJSONStringBenchmark·p0.90:   0,002 ms/op
                 deserializeJSONStringBenchmark·p0.95:   0,002 ms/op
                 deserializeJSONStringBenchmark·p0.99:   0,003 ms/op
                 deserializeJSONStringBenchmark·p0.999:  0,018 ms/op
                 deserializeJSONStringBenchmark·p0.9999: 0,031 ms/op
                 deserializeJSONStringBenchmark·p1.00:   1,307 ms/op



Result "be.niedel.proto.comparison.serialization.DeserializationComparisonService.deserializeJSONStringBenchmark":
  N = 1149517
  mean =      0,002 ±(99.9%) 0,001 ms/op

  Histogram, ms/op:
    [0,000, 0,125) = 1149479
    [0,125, 0,250) = 3
    [0,250, 0,375) = 0
    [0,375, 0,500) = 0
    [0,500, 0,625) = 0
    [0,625, 0,750) = 0
    [0,750, 0,875) = 0
    [0,875, 1,000) = 1
    [1,000, 1,125) = 5
    [1,125, 1,250) = 23
    [1,250, 1,375) = 6
    [1,375, 1,500) = 0
    [1,500, 1,625) = 0
    [1,625, 1,750) = 0
    [1,750, 1,875) = 0

  Percentiles, ms/op:
      p(0,0000) =      0,001 ms/op
     p(50,0000) =      0,002 ms/op
     p(90,0000) =      0,002 ms/op
     p(95,0000) =      0,002 ms/op
     p(99,0000) =      0,003 ms/op
     p(99,9000) =      0,018 ms/op
     p(99,9900) =      0,031 ms/op
     p(99,9990) =      1,232 ms/op
     p(99,9999) =      1,304 ms/op
    p(100,0000) =      1,307 ms/op


# JMH version: 1.25.2
# VM version: JDK 14.0.1, OpenJDK 64-Bit Server VM, 14.0.1+7
# VM invoker: C:\Program Files\Java\jdk-14.0.1\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2020.1.1\lib\idea_rt.jar=59084:C:\Program Files\JetBrains\IntelliJ IDEA 2020.1.1\bin -Dfile.encoding=UTF-8
# Warmup: 1 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: be.niedel.proto.comparison.serialization.DeserializationComparisonService.deserializeProtoEncodedBinaryMessage

# Run progress: 77,78% complete, ETA 00:02:44
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 0,001 ±(99.9%) 0,001 ms/op
Iteration   1: 0,001 ±(99.9%) 0,001 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.00:   0,001 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.50:   0,001 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.90:   0,001 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.95:   0,001 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.99:   0,001 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.999:  0,010 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.9999: 0,036 ms/op
                 deserializeProtoEncodedBinaryMessage·p1.00:   1,284 ms/op

Iteration   2: 0,001 ±(99.9%) 0,001 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.00:   0,001 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.50:   0,001 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.90:   0,001 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.95:   0,001 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.99:   0,001 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.999:  0,009 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.9999: 0,030 ms/op
                 deserializeProtoEncodedBinaryMessage·p1.00:   1,210 ms/op

Iteration   3: 0,001 ±(99.9%) 0,001 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.00:   0,001 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.50:   0,001 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.90:   0,001 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.95:   0,001 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.99:   0,001 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.999:  0,009 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.9999: 0,030 ms/op
                 deserializeProtoEncodedBinaryMessage·p1.00:   1,286 ms/op


# Run progress: 83,33% complete, ETA 00:02:03
# Fork: 1 of 1
# Warmup Iteration   1: 0,001 ±(99.9%) 0,001 ms/op
Iteration   1: 0,001 ±(99.9%) 0,001 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.00:   0,001 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.50:   0,001 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.90:   0,001 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.95:   0,001 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.99:   0,001 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.999:  0,014 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.9999: 0,051 ms/op
                 deserializeProtoEncodedBinaryMessage·p1.00:   1,368 ms/op

Iteration   2: 0,001 ±(99.9%) 0,001 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.00:   0,001 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.50:   0,001 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.90:   0,001 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.95:   0,001 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.99:   0,001 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.999:  0,012 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.9999: 0,055 ms/op
                 deserializeProtoEncodedBinaryMessage·p1.00:   1,311 ms/op

Iteration   3: 0,001 ±(99.9%) 0,001 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.00:   0,001 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.50:   0,001 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.90:   0,001 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.95:   0,001 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.99:   0,001 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.999:  0,012 ms/op
                 deserializeProtoEncodedBinaryMessage·p0.9999: 0,037 ms/op
                 deserializeProtoEncodedBinaryMessage·p1.00:   1,290 ms/op



Result "be.niedel.proto.comparison.serialization.DeserializationComparisonService.deserializeProtoEncodedBinaryMessage":
  N = 670915
  mean =      0,001 ±(99.9%) 0,001 ms/op

  Histogram, ms/op:
    [0,000, 0,125) = 670878
    [0,125, 0,250) = 6
    [0,250, 0,375) = 0
    [0,375, 0,500) = 0
    [0,500, 0,625) = 0
    [0,625, 0,750) = 0
    [0,750, 0,875) = 1
    [0,875, 1,000) = 2
    [1,000, 1,125) = 8
    [1,125, 1,250) = 13
    [1,250, 1,375) = 7
    [1,375, 1,500) = 0
    [1,500, 1,625) = 0
    [1,625, 1,750) = 0
    [1,750, 1,875) = 0

  Percentiles, ms/op:
      p(0,0000) =      0,001 ms/op
     p(50,0000) =      0,001 ms/op
     p(90,0000) =      0,001 ms/op
     p(95,0000) =      0,001 ms/op
     p(99,0000) =      0,001 ms/op
     p(99,9000) =      0,013 ms/op
     p(99,9900) =      0,045 ms/op
     p(99,9990) =      1,276 ms/op
     p(99,9999) =      1,368 ms/op
    p(100,0000) =      1,368 ms/op


# JMH version: 1.25.2
# VM version: JDK 14.0.1, OpenJDK 64-Bit Server VM, 14.0.1+7
# VM invoker: C:\Program Files\Java\jdk-14.0.1\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2020.1.1\lib\idea_rt.jar=59084:C:\Program Files\JetBrains\IntelliJ IDEA 2020.1.1\bin -Dfile.encoding=UTF-8
# Warmup: 1 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: be.niedel.proto.comparison.serialization.DeserializationComparisonService.deserializeUtf8EncodedBinaryJSONMessageBenchmark

# Run progress: 88,89% complete, ETA 00:01:22
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 0,002 ±(99.9%) 0,001 ms/op
Iteration   1: 0,002 ±(99.9%) 0,001 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.00:   0,001 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.50:   0,001 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.90:   0,002 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.95:   0,002 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.99:   0,002 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.999:  0,018 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.9999: 0,119 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p1.00:   1,335 ms/op

Iteration   2: 0,001 ±(99.9%) 0,001 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.00:   0,001 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.50:   0,001 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.90:   0,002 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.95:   0,002 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.99:   0,002 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.999:  0,018 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.9999: 0,031 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p1.00:   1,155 ms/op

Iteration   3: 0,001 ±(99.9%) 0,001 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.00:   0,001 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.50:   0,001 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.90:   0,002 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.95:   0,002 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.99:   0,003 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.999:  0,018 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.9999: 0,033 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p1.00:   1,253 ms/op


# Run progress: 94,44% complete, ETA 00:00:41
# Fork: 1 of 1
# Warmup Iteration   1: 0,002 ±(99.9%) 0,001 ms/op
Iteration   1: 0,002 ±(99.9%) 0,001 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.00:   0,001 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.50:   0,001 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.90:   0,002 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.95:   0,002 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.99:   0,003 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.999:  0,018 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.9999: 0,052 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p1.00:   1,311 ms/op

Iteration   2: 0,002 ±(99.9%) 0,001 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.00:   0,001 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.50:   0,001 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.90:   0,002 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.95:   0,002 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.99:   0,003 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.999:  0,018 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.9999: 0,043 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p1.00:   1,235 ms/op

Iteration   3: 0,002 ±(99.9%) 0,001 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.00:   0,001 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.50:   0,001 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.90:   0,002 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.95:   0,002 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.99:   0,002 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.999:  0,018 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.9999: 0,043 ms/op
                 deserializeUtf8EncodedBinaryJSONMessageBenchmark·p1.00:   1,210 ms/op



Result "be.niedel.proto.comparison.serialization.DeserializationComparisonService.deserializeUtf8EncodedBinaryJSONMessageBenchmark":
  N = 643152
  mean =      0,002 ±(99.9%) 0,001 ms/op

  Histogram, ms/op:
    [0,000, 0,125) = 643112
    [0,125, 0,250) = 3
    [0,250, 0,375) = 0
    [0,375, 0,500) = 0
    [0,500, 0,625) = 0
    [0,625, 0,750) = 0
    [0,750, 0,875) = 0
    [0,875, 1,000) = 0
    [1,000, 1,125) = 15
    [1,125, 1,250) = 20
    [1,250, 1,375) = 2
    [1,375, 1,500) = 0
    [1,500, 1,625) = 0
    [1,625, 1,750) = 0
    [1,750, 1,875) = 0

  Percentiles, ms/op:
      p(0,0000) =      0,001 ms/op
     p(50,0000) =      0,001 ms/op
     p(90,0000) =      0,002 ms/op
     p(95,0000) =      0,002 ms/op
     p(99,0000) =      0,003 ms/op
     p(99,9000) =      0,018 ms/op
     p(99,9900) =      0,044 ms/op
     p(99,9990) =      1,222 ms/op
     p(99,9999) =      1,311 ms/op
    p(100,0000) =      1,311 ms/op


# JMH version: 1.25.2
# VM version: JDK 14.0.1, OpenJDK 64-Bit Server VM, 14.0.1+7
# VM invoker: C:\Program Files\Java\jdk-14.0.1\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2020.1.1\lib\idea_rt.jar=59084:C:\Program Files\JetBrains\IntelliJ IDEA 2020.1.1\bin -Dfile.encoding=UTF-8
# Warmup: 1 iterations, single-shot each
# Measurement: 3 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: be.niedel.proto.comparison.serialization.DeserializationComparisonService.deserializeJSONStringBenchmark

# Run progress: 100,00% complete, ETA 00:00:00
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 32,904 ms/op
Iteration   1: 0,169 ms/op
Iteration   2: 0,137 ms/op
Iteration   3: 0,168 ms/op

# Run progress: 100,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 33,229 ms/op
Iteration   1: 0,138 ms/op
Iteration   2: 0,102 ms/op
Iteration   3: 0,091 ms/op


Result "be.niedel.proto.comparison.serialization.DeserializationComparisonService.deserializeJSONStringBenchmark":
  N = 3
  mean =      0,110 ±(99.9%) 0,446 ms/op

  Histogram, ms/op:
    [0,090, 0,095) = 1
    [0,095, 0,100) = 0
    [0,100, 0,105) = 1
    [0,105, 0,110) = 0
    [0,110, 0,115) = 0
    [0,115, 0,120) = 0
    [0,120, 0,125) = 0
    [0,125, 0,130) = 0
    [0,130, 0,135) = 0
    [0,135, 0,140) = 1

  Percentiles, ms/op:
      p(0,0000) =      0,091 ms/op
     p(50,0000) =      0,102 ms/op
     p(90,0000) =      0,138 ms/op
     p(95,0000) =      0,138 ms/op
     p(99,0000) =      0,138 ms/op
     p(99,9000) =      0,138 ms/op
     p(99,9900) =      0,138 ms/op
     p(99,9990) =      0,138 ms/op
     p(99,9999) =      0,138 ms/op
    p(100,0000) =      0,138 ms/op


# JMH version: 1.25.2
# VM version: JDK 14.0.1, OpenJDK 64-Bit Server VM, 14.0.1+7
# VM invoker: C:\Program Files\Java\jdk-14.0.1\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2020.1.1\lib\idea_rt.jar=59084:C:\Program Files\JetBrains\IntelliJ IDEA 2020.1.1\bin -Dfile.encoding=UTF-8
# Warmup: 1 iterations, single-shot each
# Measurement: 3 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: be.niedel.proto.comparison.serialization.DeserializationComparisonService.deserializeProtoEncodedBinaryMessage

# Run progress: 100,00% complete, ETA 00:00:00
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 0,373 ms/op
Iteration   1: 0,076 ms/op
Iteration   2: 0,086 ms/op
Iteration   3: 0,066 ms/op

# Run progress: 100,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 0,366 ms/op
Iteration   1: 0,086 ms/op
Iteration   2: 0,056 ms/op
Iteration   3: 0,042 ms/op


Result "be.niedel.proto.comparison.serialization.DeserializationComparisonService.deserializeProtoEncodedBinaryMessage":
  N = 3
  mean =      0,061 ±(99.9%) 0,410 ms/op

  Histogram, ms/op:
    [0,040, 0,043) = 1
    [0,043, 0,045) = 0
    [0,045, 0,048) = 0
    [0,048, 0,050) = 0
    [0,050, 0,053) = 0
    [0,053, 0,055) = 0
    [0,055, 0,058) = 1
    [0,058, 0,060) = 0
    [0,060, 0,063) = 0
    [0,063, 0,065) = 0
    [0,065, 0,068) = 0
    [0,068, 0,070) = 0
    [0,070, 0,073) = 0
    [0,073, 0,075) = 0
    [0,075, 0,078) = 0
    [0,078, 0,080) = 0
    [0,080, 0,083) = 0
    [0,083, 0,085) = 0
    [0,085, 0,088) = 1

  Percentiles, ms/op:
      p(0,0000) =      0,042 ms/op
     p(50,0000) =      0,056 ms/op
     p(90,0000) =      0,086 ms/op
     p(95,0000) =      0,086 ms/op
     p(99,0000) =      0,086 ms/op
     p(99,9000) =      0,086 ms/op
     p(99,9900) =      0,086 ms/op
     p(99,9990) =      0,086 ms/op
     p(99,9999) =      0,086 ms/op
    p(100,0000) =      0,086 ms/op


# JMH version: 1.25.2
# VM version: JDK 14.0.1, OpenJDK 64-Bit Server VM, 14.0.1+7
# VM invoker: C:\Program Files\Java\jdk-14.0.1\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2020.1.1\lib\idea_rt.jar=59084:C:\Program Files\JetBrains\IntelliJ IDEA 2020.1.1\bin -Dfile.encoding=UTF-8
# Warmup: 1 iterations, single-shot each
# Measurement: 3 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: be.niedel.proto.comparison.serialization.DeserializationComparisonService.deserializeUtf8EncodedBinaryJSONMessageBenchmark

# Run progress: 100,00% complete, ETA 00:00:00
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 34,603 ms/op
Iteration   1: 0,157 ms/op
Iteration   2: 0,129 ms/op
Iteration   3: 0,109 ms/op

# Run progress: 100,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 35,522 ms/op
Iteration   1: 0,148 ms/op
Iteration   2: 0,136 ms/op
Iteration   3: 0,121 ms/op


Result "be.niedel.proto.comparison.serialization.DeserializationComparisonService.deserializeUtf8EncodedBinaryJSONMessageBenchmark":
  N = 3
  mean =      0,135 ±(99.9%) 0,245 ms/op

  Histogram, ms/op:
    [0,120, 0,123) = 1
    [0,123, 0,125) = 0
    [0,125, 0,128) = 0
    [0,128, 0,130) = 0
    [0,130, 0,133) = 0
    [0,133, 0,135) = 0
    [0,135, 0,138) = 1
    [0,138, 0,140) = 0
    [0,140, 0,143) = 0
    [0,143, 0,145) = 0
    [0,145, 0,148) = 0

  Percentiles, ms/op:
      p(0,0000) =      0,121 ms/op
     p(50,0000) =      0,136 ms/op
     p(90,0000) =      0,148 ms/op
     p(95,0000) =      0,148 ms/op
     p(99,0000) =      0,148 ms/op
     p(99,9000) =      0,148 ms/op
     p(99,9900) =      0,148 ms/op
     p(99,9990) =      0,148 ms/op
     p(99,9999) =      0,148 ms/op
    p(100,0000) =      0,148 ms/op


# Run complete. Total time: 00:12:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                                                                     Mode      Cnt     Score     Error   Units
SerializationAndDeserializationComparisonService.deserializeJSONStringBenchmark                                                                              thrpt        3   633,418 ±  45,629  ops/ms
SerializationAndDeserializationComparisonService.deserializeProtoEncodedBinaryMessage                                                                        thrpt        3  1411,431 ± 507,136  ops/ms
SerializationAndDeserializationComparisonService.deserializeUtf8EncodedBinaryJSONMessageBenchmark                                                            thrpt        3   694,524 ±  28,441  ops/ms
SerializationAndDeserializationComparisonService.deserializeJSONStringBenchmark                                                                               avgt        3     0,002 ±   0,001   ms/op
SerializationAndDeserializationComparisonService.deserializeProtoEncodedBinaryMessage                                                                         avgt        3     0,001 ±   0,001   ms/op
SerializationAndDeserializationComparisonService.deserializeUtf8EncodedBinaryJSONMessageBenchmark                                                             avgt        3     0,001 ±   0,001   ms/op
SerializationAndDeserializationComparisonService.deserializeJSONStringBenchmark                                                                             sample  1149517     0,002 ±   0,001   ms/op
SerializationAndDeserializationComparisonService.deserializeJSONStringBenchmark:deserializeJSONStringBenchmark·p0.00                                        sample              0,001             ms/op
SerializationAndDeserializationComparisonService.deserializeJSONStringBenchmark:deserializeJSONStringBenchmark·p0.50                                        sample              0,002             ms/op
SerializationAndDeserializationComparisonService.deserializeJSONStringBenchmark:deserializeJSONStringBenchmark·p0.90                                        sample              0,002             ms/op
SerializationAndDeserializationComparisonService.deserializeJSONStringBenchmark:deserializeJSONStringBenchmark·p0.95                                        sample              0,002             ms/op
SerializationAndDeserializationComparisonService.deserializeJSONStringBenchmark:deserializeJSONStringBenchmark·p0.99                                        sample              0,003             ms/op
SerializationAndDeserializationComparisonService.deserializeJSONStringBenchmark:deserializeJSONStringBenchmark·p0.999                                       sample              0,018             ms/op
SerializationAndDeserializationComparisonService.deserializeJSONStringBenchmark:deserializeJSONStringBenchmark·p0.9999                                      sample              0,031             ms/op
SerializationAndDeserializationComparisonService.deserializeJSONStringBenchmark:deserializeJSONStringBenchmark·p1.00                                        sample              1,307             ms/op
SerializationAndDeserializationComparisonService.deserializeProtoEncodedBinaryMessage                                                                       sample   670915     0,001 ±   0,001   ms/op
SerializationAndDeserializationComparisonService.deserializeProtoEncodedBinaryMessage:deserializeProtoEncodedBinaryMessage·p0.00                            sample              0,001             ms/op
SerializationAndDeserializationComparisonService.deserializeProtoEncodedBinaryMessage:deserializeProtoEncodedBinaryMessage·p0.50                            sample              0,001             ms/op
SerializationAndDeserializationComparisonService.deserializeProtoEncodedBinaryMessage:deserializeProtoEncodedBinaryMessage·p0.90                            sample              0,001             ms/op
SerializationAndDeserializationComparisonService.deserializeProtoEncodedBinaryMessage:deserializeProtoEncodedBinaryMessage·p0.95                            sample              0,001             ms/op
SerializationAndDeserializationComparisonService.deserializeProtoEncodedBinaryMessage:deserializeProtoEncodedBinaryMessage·p0.99                            sample              0,001             ms/op
SerializationAndDeserializationComparisonService.deserializeProtoEncodedBinaryMessage:deserializeProtoEncodedBinaryMessage·p0.999                           sample              0,013             ms/op
SerializationAndDeserializationComparisonService.deserializeProtoEncodedBinaryMessage:deserializeProtoEncodedBinaryMessage·p0.9999                          sample              0,045             ms/op
SerializationAndDeserializationComparisonService.deserializeProtoEncodedBinaryMessage:deserializeProtoEncodedBinaryMessage·p1.00                            sample              1,368             ms/op
SerializationAndDeserializationComparisonService.deserializeUtf8EncodedBinaryJSONMessageBenchmark                                                           sample   643152     0,002 ±   0,001   ms/op
SerializationAndDeserializationComparisonService.deserializeUtf8EncodedBinaryJSONMessageBenchmark:deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.00    sample              0,001             ms/op
SerializationAndDeserializationComparisonService.deserializeUtf8EncodedBinaryJSONMessageBenchmark:deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.50    sample              0,001             ms/op
SerializationAndDeserializationComparisonService.deserializeUtf8EncodedBinaryJSONMessageBenchmark:deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.90    sample              0,002             ms/op
SerializationAndDeserializationComparisonService.deserializeUtf8EncodedBinaryJSONMessageBenchmark:deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.95    sample              0,002             ms/op
SerializationAndDeserializationComparisonService.deserializeUtf8EncodedBinaryJSONMessageBenchmark:deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.99    sample              0,003             ms/op
SerializationAndDeserializationComparisonService.deserializeUtf8EncodedBinaryJSONMessageBenchmark:deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.999   sample              0,018             ms/op
SerializationAndDeserializationComparisonService.deserializeUtf8EncodedBinaryJSONMessageBenchmark:deserializeUtf8EncodedBinaryJSONMessageBenchmark·p0.9999  sample              0,044             ms/op
SerializationAndDeserializationComparisonService.deserializeUtf8EncodedBinaryJSONMessageBenchmark:deserializeUtf8EncodedBinaryJSONMessageBenchmark·p1.00    sample              1,311             ms/op
SerializationAndDeserializationComparisonService.deserializeJSONStringBenchmark                                                                                 ss        3     0,110 ±   0,446   ms/op
SerializationAndDeserializationComparisonService.deserializeProtoEncodedBinaryMessage                                                                           ss        3     0,061 ±   0,410   ms/op
SerializationAndDeserializationComparisonService.deserializeUtf8EncodedBinaryJSONMessageBenchmark                                                               ss        3     0,135 ±   0,245   ms/op

Process finished with exit code 0
